class Solution {
public:
void dfs(vector<int>&edges,int node,vector<int>&path,int dis,vector<int>&visited)
{
    path[node]=dis;
    visited[node]=1;
    if(edges[node]!=-1&&visited[edges[node]]!=1)
    dfs(edges,edges[node],path,dis+1,visited);
}
    int closestMeetingNode(vector<int>& edges, int node1, int node2) {
        int n=edges.size();
        vector<int>path1(n,-1);
        vector<int>path2(n,-1);
        vector<int>visited1(n,-1);
        dfs(edges,node1,path1,0,visited1);
        vector<int>visited2(n,-1);
        dfs(edges,node2,path2,0,visited2);
        /*  for(int i=0;i<n;i++)
          cout<<path1[i]<<" ";
         cout<<endl;
           for(int i=0;i<n;i++)
          cout<<path2[i]<<" ";*/
          int index=-1;
       int min_of_max=INT_MAX;
          
        for(int i=0;i<n;i++)
         {
            if(path1[i]>=0&&path2[i]>=0)
            { 
               int maxi=max(path1[i],path2[i]);
               if(maxi<min_of_max)
               {
                   min_of_max=maxi;
                   index=i;
               }
            }
         }
        
        
         return index;

    }
};
