class Solution {
public:
struct Compare {
    bool operator()(const pair<char, int>& a, const pair<char, int>& b) {
        if (a.first == b.first) {
            return a.second < b.second;  
        }
        return a.first >b.first;  
    }
};
    string clearStars(string s) {
        
        priority_queue<pair<char, int>, vector<pair<char, int>>, Compare> pq;
        while(!pq.empty())
        {
            cout<<pq.top().first<<" "<<pq.top().second<<endl;
            pq.pop();
        }
        for(int i=0;i<s.size();i++)
        {
            if(s[i]=='*'&&!pq.empty())
            {
                 pq.pop();
            }
            else{
                   pq.push({s[i],i});
            }
        }
      unordered_set<int>mp;
        while(!pq.empty())
        {
        mp.insert(pq.top().second);
         //   cout<<pq.top().first<<" "<<pq.top().second<<endl;
            pq.pop();
        }
        string ans;
        for(int i=0;i<s.size();i++)
        {
          if(mp.find(i)!=mp.end())
          ans+=s[i];
        }
        return ans;
    }
};
