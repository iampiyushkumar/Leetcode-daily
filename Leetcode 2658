class Solution {
public:
int rows[4]={-1,1,0,0};
int cols[4]={0,0,-1,1};
bool valid(int i, int j, int n, int m)
  {return i>=0&&j>=0&&i<n&&j<m;
  }
  int bfs(int i, int j,vector<vector<int>>&grid)
  { int n=grid.size();
  int m=grid[0].size();
    queue<pair<int,int>>q;
    q.push({i,j});
    int cost=0;
    cost+=grid[i][j];
    grid[i][j]=0;
    
   while(q.size()>0)
   {
    int x=q.front().first;
    int y=q.front().second;
    q.pop();
    for(int k=0;k<4;k++)
    {
        int nx=x+rows[k];
        int ny=y+cols[k];
        if(valid(nx,ny,n,m)&&grid[nx][ny]>0)
          { q.push({nx,ny});
            cost+=grid[nx][ny];
            grid[nx][ny]=0;
          }
    }
   }
   return cost;
  }
    int findMaxFish(vector<vector<int>>& grid) {
        int n=grid.size();
        int m=grid[0].size();
        int maxi=0;
        for(int i=0;i<n;i++)
        {
            for(int j=0;j<m;j++)
            {
                if(grid[i][j]>0)
                {
                    maxi=max(maxi,bfs(i,j,grid));
                }
            }
        }
        return maxi;
    }
};
