/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
int maxi=0;
int calc(TreeNode*root,int data)
{
    if(root==nullptr)
    return 0;
    if(root->val!=data)
    return 0;
  int l=0;
  int r=0;
  if(root->left)
    l=(root->left->val==data?1:0)+calc(root->left,data);
    if(root->right)
    r=(root->right->val==data?1:0)+calc(root->right,data);
    maxi=max(maxi,(l+r));
    return max(l,r);
}
void find(TreeNode*root)
{
    if(root==nullptr)
    return ;
    calc(root,root->val);
    find(root->left);
    find(root->right);
}
    int longestUnivaluePath(TreeNode* root) {
        find(root);
        return maxi;
    }
};
