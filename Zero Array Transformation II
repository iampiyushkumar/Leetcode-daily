class Solution {
public:
bool possible(vector<int>&nums,vector<vector<int>>&queries,int k)
{
    int n=nums.size();
    vector<int>diff(n+1);
    for(int i=0;i< min(k,(int)queries.size());i++)
    {  
       int l=queries[i][0];
        int r=queries[i][1];
        int val=queries[i][2];
        diff[l]+=val;
        diff[r+1]-=val;
    }
    int sum=0;
    for(int i=0;i<n;i++)
    {
       sum+=diff[i];
       if(nums[i]>sum) 
       return false;
    }
    return true;
}
    int minZeroArray(vector<int>& nums, vector<vector<int>>& queries) {
        int n=queries.size();
        int start=0;
        int end=n;
        if(possible(nums,queries,end)==false)  return -1;
        int res=0;
        while(start<=end)
        {
            int mid=start+(end-start)/2;
            if(possible(nums,queries,mid))
           { res=mid;
            end=mid-1;
           }
            else
            start=mid+1;
        }
        return res;
    }
};
