class Solution {
public:
    long long mod = 1e9 + 7;

    int finddistinctfactor(int num) {
        int cnt = 0;
        while (num % 2 == 0) {
            cnt = 1;
            num /= 2;
        }
        for (int i = 3; i * i <= num; i += 2) {
            int d = 0;
            while (num % i == 0) {
                d = 1;
                num /= i;
            }
            cnt += d;
        }
        if (num > 1)
            cnt++;
        return cnt;
    }

    long long calcpower(long long x, long long n) {
        long long res = 1;
        x %= mod;
        while (n > 0) {
            if (n % 2 == 1) {
                res = (res * x) % mod;
            }
            x = (x * x) % mod;
            n /= 2;
        }
        return res;
    }

    vector<int> nextlargestequalleft(vector<int>& v) {
        int n = v.size();
        vector<int> ans(n);
        stack<int> st;
        ans[0] = -1;
        st.push(0);
        for (int i = 1; i < n; i++) {
            while (!st.empty() && v[st.top()] < v[i])
                st.pop();
            ans[i] = (st.empty()) ? -1 : st.top();
            st.push(i);
        }
        return ans;
    }

    vector<int> nextlargestright(vector<int>& v) {
        int n = v.size();
        vector<int> ans(n);
        stack<int> st;
        ans[n - 1] = n;
        st.push(n - 1);
        for (int i = n - 2; i >= 0; i--) {
            while (!st.empty() && v[st.top()] <= v[i])
                st.pop();
            ans[i] = (st.empty()) ? n : st.top();
            st.push(i);
        }
        return ans;
    }

    int maximumScore(vector<int>& nums, int k) {
        int n = nums.size();
        vector<int> v(n);
        for (int i = 0; i < n; i++)
            v[i] = finddistinctfactor(nums[i]);

        vector<int> left = nextlargestequalleft(v);
        vector<int> right = nextlargestright(v);
        vector<long long> range(n);
        for (int i = 0; i < n; i++)
            range[i] = (long long)(i - left[i]) * (right[i] - i);

        vector<pair<int, long long>> temp;
        for (int i = 0; i < n; i++)
            temp.emplace_back(nums[i], range[i]);

        sort(temp.rbegin(), temp.rend());

         long long score = 1;
    long long longk = k; 

    for (int i = 0; i < n && longk > 0; i++) {
        long long times = temp[i].second;
        long long count = min(longk, times);  
        score = (score * calcpower(temp[i].first, count)) % mod;
        longk -= count;  
    }
    return score;
}
};
