/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
TreeNode*lca(TreeNode*root,TreeNode*p,TreeNode*q)
{
      if(root==nullptr||root==p||root==q)  return root;
        TreeNode*l=lca(root->left,p,q);
        TreeNode*r=lca(root->right,p,q);
        if(l&&r)  return root;
        if(!l)  return r;
        else return l;

}
    TreeNode* lcaDeepestLeaves(TreeNode* root) {
      if (root == nullptr) return nullptr;

    queue<TreeNode*> q;
    q.push(root);
    vector<TreeNode*> deepestLevel;

    while (!q.empty()) {
        int size = q.size();
        deepestLevel.clear();  

        for (int i = 0; i < size; ++i) {
            TreeNode* node = q.front();
            q.pop();
            deepestLevel.push_back(node);  

            if (node->left) q.push(node->left);
            if (node->right) q.push(node->right);
        }
    }
    
    TreeNode* ans = deepestLevel[0];
    cout<<deepestLevel.size();
    
    for (int i = 1; i < deepestLevel.size(); ++i) {
        cout<<ans->val<<" "<<deepestLevel[i]->val<<endl;
        ans = lca(root, ans, deepestLevel[i]);
        cout<<"ancestor is"<<ans->val<<endl;
    }
    

    return ans;
      
    }
};
