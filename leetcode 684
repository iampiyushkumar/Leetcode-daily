class dsu{
    public:
    vector<int>parent,size;
    dsu(int n)
    {
        parent.resize(n);
        size.resize(n,1);
        for(int i=0;i<n;i++)
          parent[i]=i;
    }

    int findparent(int node)
    {
        if(node==parent[node])
          return node;
         else
          return parent[node]=findparent(parent[node]);
    }

    bool unionbysize(int root1, int root2)
    {
        int parent1=findparent(root1);
        int parent2=findparent(root2);
        if(parent1==parent2)
          return false;
        if(size[parent1]>size[parent2])
        {
            parent[parent2]=parent1;
            size[parent1]+=size[parent2];
        }
        else
        {
            parent[parent1]=parent2;
            size[parent2]+=size[parent1];
        }
        return true;
    }

};


class Solution {
public:
    vector<int> findRedundantConnection(vector<vector<int>>& edges) {
        int n=edges.size();
        dsu disjointunion(n);
        vector<int>ans(2);
        for(int i=0;i<n;i++)
        {
          if(!disjointunion.unionbysize(edges[i][0]-1,edges[i][1]-1))
             ans=edges[i];
        }
        return ans;
    }
};

//time complexity is O(N)
