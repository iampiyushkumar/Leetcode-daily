class Solution {
public:
vector<string>columnindex;
const int mod=1e9+7;
void possible(int l,int m,char prev,string curr)
{
    if(l==m)
    {
        columnindex.push_back(curr);
        return;
    }
    for(auto ch:{'R','G','B'})
    {
        if(ch==prev)
        continue;

        possible(l+1,m,ch,curr+ch);
    }
}
map<pair<int,int>,int>mp;
int find(int n, int i, int &m)
{
    if(n==0)
    return 1;
    if(mp.find({n,i})!=mp.end())
    return mp[{n,i}];
    int ways=0;
    string prev=columnindex[i];
    for(int i=0;i<columnindex.size();i++)
    {
        
        string curr=columnindex[i];
        bool valid=true;
        for(int j=0;j<m;j++)
        {
            if(prev[j]==curr[j]){
                valid=false;
                break;
            }
        }
        if(valid)
        ways=(ways+find(n-1,i,m))%mod;
    }
    return mp[{n,i}]= ways;
}

    int colorTheGrid(int m, int n) {
        possible(0,m,'*',"");
           int ans=0;
        for(int i=0;i<columnindex.size();i++)
        {
            ans=(ans+find(n-1,i,m))%mod;
        }
        return ans;
    }
};
