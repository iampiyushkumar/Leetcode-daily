class Solution {
public:
string findLCS(string &text1, string &text2) {
  int n=text1.size();
      int m=text2.size();
      string str;
        vector<vector<int>>dp(1002,vector<int>(1002,0));
        for(int i=1;i<=n;i++)
        {
            for(int j=1;j<=m;j++)
            {  
                if(text1[i-1]==text2[j-1])
              {  
                 dp[i][j]=1+dp[i-1][j-1];
              }

               else
               dp[i][j]=max({dp[i-1][j],dp[i][j-1],dp[i-1][j-1]});
            }
        }
        int i=n;
        int j=m;
        while(i>0&&j>0)
        {
            if(text1[i-1]==text2[j-1]){
                str+=text1[i-1];
                i--;
                j--;
            }
            else if(dp[i-1][j]>dp[i][j-1])  i--;
            else
            j--;
        }
        reverse(str.begin(),str.end());
        return str;
       
}
    string shortestCommonSupersequence(string str1, string str2) {
        int n=str1.size();
        int m=str2.size();
        string lcs=findLCS(str1,str2);
      
        int k=0;
        int i=0;
        int j=0;
        string res="";
        while(k<lcs.size()){
            while(i<n&&str1[i]!=lcs[k])
            {
                     res+=str1[i++];
            }
              

            while(j<m&&str2[j]!=lcs[k])
            {
                res+=str2[j++];
            }
        
            res+=lcs[k++];
            i++;
            j++;
        }
        res+=str1.substr(i)+str2.substr(j);
        return res;
    }
};
